// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: types.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace COD.Types {

  /// <summary>Holder for reflection information generated from types.proto</summary>
  public static partial class TypesReflection {

    #region Descriptor
    /// <summary>File descriptor for types.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TypesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgt0eXBlcy5wcm90bxIJQ09ELlR5cGVzIikKBlZlY3RvchIJCgF4GAEgASgC",
            "EgkKAXkYAiABKAISCQoBehgDIAEoAiI4CgpRdWF0ZXJuaW9uEgkKAXgYASAB",
            "KAISCQoBeRgCIAEoAhIJCgF6GAMgASgCEgkKAXcYBCABKAIiMwoFQ29sb3IS",
            "CQoBchgBIAEoAhIJCgFnGAIgASgCEgkKAWIYAyABKAISCQoBYRgEIAEoAiK2",
            "AQoQQW1iaWVuY2VTZXR0aW5ncxIoCg5za3laZW5pdGhDb2xvchgBIAEoCzIQ",
            "LkNPRC5UeXBlcy5Db2xvchIpCg9za3lIb3Jpem9uQ29sb3IYAiABKAsyEC5D",
            "T0QuVHlwZXMuQ29sb3ISEwoLc3VuQWx0aXR1ZGUYAyABKAISEgoKc3VuQXpp",
            "bXV0aBgEIAEoAhIPCgdzdW5TaXplGAUgASgCEhMKC2ZvZ0REZW5zaXR5GAYg",
            "ASgCIm4KDkxldmVsTm9kZVN0YXJ0EiMKCHBvc2l0aW9uGAEgASgLMhEuQ09E",
            "LlR5cGVzLlZlY3RvchInCghyb3RhdGlvbhgCIAEoCzIVLkNPRC5UeXBlcy5R",
            "dWF0ZXJuaW9uEg4KBnJhZGl1cxgDIAEoAiJGCg9MZXZlbE5vZGVGaW5pc2gS",
            "IwoIcG9zaXRpb24YASABKAsyES5DT0QuVHlwZXMuVmVjdG9yEg4KBnJhZGl1",
            "cxgCIAEoAiL8AQoPTGV2ZWxOb2RlU3RhdGljEigKBXNoYXBlGAEgASgOMhku",
            "Q09ELlR5cGVzLkxldmVsTm9kZVNoYXBlEi4KCG1hdGVyaWFsGAIgASgOMhwu",
            "Q09ELlR5cGVzLkxldmVsTm9kZU1hdGVyaWFsEiMKCHBvc2l0aW9uGAMgASgL",
            "MhEuQ09ELlR5cGVzLlZlY3RvchIgCgVzY2FsZRgEIAEoCzIRLkNPRC5UeXBl",
            "cy5WZWN0b3ISJwoIcm90YXRpb24YBSABKAsyFS5DT0QuVHlwZXMuUXVhdGVy",
            "bmlvbhIfCgVjb2xvchgGIAEoCzIQLkNPRC5UeXBlcy5Db2xvciKHAgoSTGV2",
            "ZWxOb2RlQ3J1bWJsaW5nEigKBXNoYXBlGAEgASgOMhkuQ09ELlR5cGVzLkxl",
            "dmVsTm9kZVNoYXBlEi4KCG1hdGVyaWFsGAIgASgOMhwuQ09ELlR5cGVzLkxl",
            "dmVsTm9kZU1hdGVyaWFsEiMKCHBvc2l0aW9uGAMgASgLMhEuQ09ELlR5cGVz",
            "LlZlY3RvchIgCgVzY2FsZRgEIAEoCzIRLkNPRC5UeXBlcy5WZWN0b3ISJwoI",
            "cm90YXRpb24YBSABKAsyFS5DT0QuVHlwZXMuUXVhdGVybmlvbhISCgpzdGFi",
            "bGVUaW1lGAYgASgCEhMKC3Jlc3Bhd25UaW1lGAcgASgCImsKDUxldmVsTm9k",
            "ZVNpZ24SIwoIcG9zaXRpb24YASABKAsyES5DT0QuVHlwZXMuVmVjdG9yEicK",
            "CHJvdGF0aW9uGAIgASgLMhUuQ09ELlR5cGVzLlF1YXRlcm5pb24SDAoEdGV4",
            "dBgDIAEoCSKpAgoJTGV2ZWxOb2RlEjMKDmxldmVsTm9kZVN0YXJ0GAEgASgL",
            "MhkuQ09ELlR5cGVzLkxldmVsTm9kZVN0YXJ0SAASNQoPbGV2ZWxOb2RlRmlu",
            "aXNoGAIgASgLMhouQ09ELlR5cGVzLkxldmVsTm9kZUZpbmlzaEgAEjUKD2xl",
            "dmVsTm9kZVN0YXRpYxgDIAEoCzIaLkNPRC5UeXBlcy5MZXZlbE5vZGVTdGF0",
            "aWNIABIxCg1sZXZlbE5vZGVTaWduGAQgASgLMhguQ09ELlR5cGVzLkxldmVs",
            "Tm9kZVNpZ25IABI7ChJsZXZlbE5vZGVDcnVtYmxpbmcYBSABKAsyHS5DT0Qu",
            "VHlwZXMuTGV2ZWxOb2RlQ3J1bWJsaW5nSABCCQoHY29udGVudCqQAQoOTGV2",
            "ZWxOb2RlU2hhcGUSCQoFU1RBUlQQABIKCgZGSU5JU0gQARIICgRTSUdOEAIS",
            "HAoYX19FTkRfT0ZfU1BFQ0lBTF9QQVJUU19fEAMSCQoEQ1VCRRDoBxILCgZT",
            "UEhFUkUQ6QcSDQoIQ1lMSU5ERVIQ6gcSDAoHUFlSQU1JRBDrBxIKCgVQUklT",
            "TRDsByqfAQoRTGV2ZWxOb2RlTWF0ZXJpYWwSCwoHREVGQVVMVBAAEg0KCUdS",
            "QUJCQUJMRRABEgcKA0lDRRACEggKBExBVkEQAxIICgRXT09EEAQSDgoKR1JB",
            "UFBMQUJMRRAFEhMKD0dSQVBQTEFCTEVfTEFWQRAGEhcKE0dSQUJCQUJMRV9D",
            "UlVNQkxJTkcQBxITCg9ERUZBVUxUX0NPTE9SRUQQCGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::COD.Types.LevelNodeShape), typeof(global::COD.Types.LevelNodeMaterial), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.Vector), global::COD.Types.Vector.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.Quaternion), global::COD.Types.Quaternion.Parser, new[]{ "X", "Y", "Z", "W" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.Color), global::COD.Types.Color.Parser, new[]{ "R", "G", "B", "A" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.AmbienceSettings), global::COD.Types.AmbienceSettings.Parser, new[]{ "SkyZenithColor", "SkyHorizonColor", "SunAltitude", "SunAzimuth", "SunSize", "FogDDensity" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.LevelNodeStart), global::COD.Types.LevelNodeStart.Parser, new[]{ "Position", "Rotation", "Radius" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.LevelNodeFinish), global::COD.Types.LevelNodeFinish.Parser, new[]{ "Position", "Radius" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.LevelNodeStatic), global::COD.Types.LevelNodeStatic.Parser, new[]{ "Shape", "Material", "Position", "Scale", "Rotation", "Color" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.LevelNodeCrumbling), global::COD.Types.LevelNodeCrumbling.Parser, new[]{ "Shape", "Material", "Position", "Scale", "Rotation", "StableTime", "RespawnTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.LevelNodeSign), global::COD.Types.LevelNodeSign.Parser, new[]{ "Position", "Rotation", "Text" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.LevelNode), global::COD.Types.LevelNode.Parser, new[]{ "LevelNodeStart", "LevelNodeFinish", "LevelNodeStatic", "LevelNodeSign", "LevelNodeCrumbling" }, new[]{ "Content" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum LevelNodeShape {
    [pbr::OriginalName("START")] Start = 0,
    [pbr::OriginalName("FINISH")] Finish = 1,
    [pbr::OriginalName("SIGN")] Sign = 2,
    [pbr::OriginalName("__END_OF_SPECIAL_PARTS__")] EndOfSpecialParts = 3,
    [pbr::OriginalName("CUBE")] Cube = 1000,
    [pbr::OriginalName("SPHERE")] Sphere = 1001,
    [pbr::OriginalName("CYLINDER")] Cylinder = 1002,
    [pbr::OriginalName("PYRAMID")] Pyramid = 1003,
    [pbr::OriginalName("PRISM")] Prism = 1004,
  }

  public enum LevelNodeMaterial {
    [pbr::OriginalName("DEFAULT")] Default = 0,
    [pbr::OriginalName("GRABBABLE")] Grabbable = 1,
    [pbr::OriginalName("ICE")] Ice = 2,
    [pbr::OriginalName("LAVA")] Lava = 3,
    [pbr::OriginalName("WOOD")] Wood = 4,
    [pbr::OriginalName("GRAPPLABLE")] Grapplable = 5,
    [pbr::OriginalName("GRAPPLABLE_LAVA")] GrapplableLava = 6,
    [pbr::OriginalName("GRABBABLE_CRUMBLING")] GrabbableCrumbling = 7,
    [pbr::OriginalName("DEFAULT_COLORED")] DefaultColored = 8,
  }

  #endregion

  #region Messages
  public sealed partial class Vector : pb::IMessage<Vector>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Vector> _parser = new pb::MessageParser<Vector>(() => new Vector());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector(Vector other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector Clone() {
      return new Vector(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Quaternion : pb::IMessage<Quaternion>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Quaternion> _parser = new pb::MessageParser<Quaternion>(() => new Quaternion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Quaternion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion(Quaternion other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      w_ = other.w_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion Clone() {
      return new Quaternion(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 4;
    private float w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Quaternion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Quaternion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(W, other.W)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (W != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(W);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (W != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(W);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (W != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(W);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (W != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Quaternion other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.W != 0F) {
        W = other.W;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 37: {
            W = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 37: {
            W = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Color : pb::IMessage<Color>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Color> _parser = new pb::MessageParser<Color>(() => new Color());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Color> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color(Color other) : this() {
      r_ = other.r_;
      g_ = other.g_;
      b_ = other.b_;
      a_ = other.a_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color Clone() {
      return new Color(this);
    }

    /// <summary>Field number for the "r" field.</summary>
    public const int RFieldNumber = 1;
    private float r_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float R {
      get { return r_; }
      set {
        r_ = value;
      }
    }

    /// <summary>Field number for the "g" field.</summary>
    public const int GFieldNumber = 2;
    private float g_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float G {
      get { return g_; }
      set {
        g_ = value;
      }
    }

    /// <summary>Field number for the "b" field.</summary>
    public const int BFieldNumber = 3;
    private float b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 4;
    private float a_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Color);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Color other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(R, other.R)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(G, other.G)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(B, other.B)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(A, other.A)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (R != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(R);
      if (G != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(G);
      if (B != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(B);
      if (A != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(A);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (R != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(R);
      }
      if (G != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(G);
      }
      if (B != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(B);
      }
      if (A != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(A);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (R != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(R);
      }
      if (G != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(G);
      }
      if (B != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(B);
      }
      if (A != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(A);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (R != 0F) {
        size += 1 + 4;
      }
      if (G != 0F) {
        size += 1 + 4;
      }
      if (B != 0F) {
        size += 1 + 4;
      }
      if (A != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Color other) {
      if (other == null) {
        return;
      }
      if (other.R != 0F) {
        R = other.R;
      }
      if (other.G != 0F) {
        G = other.G;
      }
      if (other.B != 0F) {
        B = other.B;
      }
      if (other.A != 0F) {
        A = other.A;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            R = input.ReadFloat();
            break;
          }
          case 21: {
            G = input.ReadFloat();
            break;
          }
          case 29: {
            B = input.ReadFloat();
            break;
          }
          case 37: {
            A = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            R = input.ReadFloat();
            break;
          }
          case 21: {
            G = input.ReadFloat();
            break;
          }
          case 29: {
            B = input.ReadFloat();
            break;
          }
          case 37: {
            A = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AmbienceSettings : pb::IMessage<AmbienceSettings>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AmbienceSettings> _parser = new pb::MessageParser<AmbienceSettings>(() => new AmbienceSettings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AmbienceSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AmbienceSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AmbienceSettings(AmbienceSettings other) : this() {
      skyZenithColor_ = other.skyZenithColor_ != null ? other.skyZenithColor_.Clone() : null;
      skyHorizonColor_ = other.skyHorizonColor_ != null ? other.skyHorizonColor_.Clone() : null;
      sunAltitude_ = other.sunAltitude_;
      sunAzimuth_ = other.sunAzimuth_;
      sunSize_ = other.sunSize_;
      fogDDensity_ = other.fogDDensity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AmbienceSettings Clone() {
      return new AmbienceSettings(this);
    }

    /// <summary>Field number for the "skyZenithColor" field.</summary>
    public const int SkyZenithColorFieldNumber = 1;
    private global::COD.Types.Color skyZenithColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Color SkyZenithColor {
      get { return skyZenithColor_; }
      set {
        skyZenithColor_ = value;
      }
    }

    /// <summary>Field number for the "skyHorizonColor" field.</summary>
    public const int SkyHorizonColorFieldNumber = 2;
    private global::COD.Types.Color skyHorizonColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Color SkyHorizonColor {
      get { return skyHorizonColor_; }
      set {
        skyHorizonColor_ = value;
      }
    }

    /// <summary>Field number for the "sunAltitude" field.</summary>
    public const int SunAltitudeFieldNumber = 3;
    private float sunAltitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SunAltitude {
      get { return sunAltitude_; }
      set {
        sunAltitude_ = value;
      }
    }

    /// <summary>Field number for the "sunAzimuth" field.</summary>
    public const int SunAzimuthFieldNumber = 4;
    private float sunAzimuth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SunAzimuth {
      get { return sunAzimuth_; }
      set {
        sunAzimuth_ = value;
      }
    }

    /// <summary>Field number for the "sunSize" field.</summary>
    public const int SunSizeFieldNumber = 5;
    private float sunSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SunSize {
      get { return sunSize_; }
      set {
        sunSize_ = value;
      }
    }

    /// <summary>Field number for the "fogDDensity" field.</summary>
    public const int FogDDensityFieldNumber = 6;
    private float fogDDensity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FogDDensity {
      get { return fogDDensity_; }
      set {
        fogDDensity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AmbienceSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AmbienceSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SkyZenithColor, other.SkyZenithColor)) return false;
      if (!object.Equals(SkyHorizonColor, other.SkyHorizonColor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SunAltitude, other.SunAltitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SunAzimuth, other.SunAzimuth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SunSize, other.SunSize)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FogDDensity, other.FogDDensity)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (skyZenithColor_ != null) hash ^= SkyZenithColor.GetHashCode();
      if (skyHorizonColor_ != null) hash ^= SkyHorizonColor.GetHashCode();
      if (SunAltitude != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SunAltitude);
      if (SunAzimuth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SunAzimuth);
      if (SunSize != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SunSize);
      if (FogDDensity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FogDDensity);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (skyZenithColor_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SkyZenithColor);
      }
      if (skyHorizonColor_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SkyHorizonColor);
      }
      if (SunAltitude != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(SunAltitude);
      }
      if (SunAzimuth != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(SunAzimuth);
      }
      if (SunSize != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(SunSize);
      }
      if (FogDDensity != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(FogDDensity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (skyZenithColor_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SkyZenithColor);
      }
      if (skyHorizonColor_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SkyHorizonColor);
      }
      if (SunAltitude != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(SunAltitude);
      }
      if (SunAzimuth != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(SunAzimuth);
      }
      if (SunSize != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(SunSize);
      }
      if (FogDDensity != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(FogDDensity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (skyZenithColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SkyZenithColor);
      }
      if (skyHorizonColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SkyHorizonColor);
      }
      if (SunAltitude != 0F) {
        size += 1 + 4;
      }
      if (SunAzimuth != 0F) {
        size += 1 + 4;
      }
      if (SunSize != 0F) {
        size += 1 + 4;
      }
      if (FogDDensity != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AmbienceSettings other) {
      if (other == null) {
        return;
      }
      if (other.skyZenithColor_ != null) {
        if (skyZenithColor_ == null) {
          SkyZenithColor = new global::COD.Types.Color();
        }
        SkyZenithColor.MergeFrom(other.SkyZenithColor);
      }
      if (other.skyHorizonColor_ != null) {
        if (skyHorizonColor_ == null) {
          SkyHorizonColor = new global::COD.Types.Color();
        }
        SkyHorizonColor.MergeFrom(other.SkyHorizonColor);
      }
      if (other.SunAltitude != 0F) {
        SunAltitude = other.SunAltitude;
      }
      if (other.SunAzimuth != 0F) {
        SunAzimuth = other.SunAzimuth;
      }
      if (other.SunSize != 0F) {
        SunSize = other.SunSize;
      }
      if (other.FogDDensity != 0F) {
        FogDDensity = other.FogDDensity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (skyZenithColor_ == null) {
              SkyZenithColor = new global::COD.Types.Color();
            }
            input.ReadMessage(SkyZenithColor);
            break;
          }
          case 18: {
            if (skyHorizonColor_ == null) {
              SkyHorizonColor = new global::COD.Types.Color();
            }
            input.ReadMessage(SkyHorizonColor);
            break;
          }
          case 29: {
            SunAltitude = input.ReadFloat();
            break;
          }
          case 37: {
            SunAzimuth = input.ReadFloat();
            break;
          }
          case 45: {
            SunSize = input.ReadFloat();
            break;
          }
          case 53: {
            FogDDensity = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (skyZenithColor_ == null) {
              SkyZenithColor = new global::COD.Types.Color();
            }
            input.ReadMessage(SkyZenithColor);
            break;
          }
          case 18: {
            if (skyHorizonColor_ == null) {
              SkyHorizonColor = new global::COD.Types.Color();
            }
            input.ReadMessage(SkyHorizonColor);
            break;
          }
          case 29: {
            SunAltitude = input.ReadFloat();
            break;
          }
          case 37: {
            SunAzimuth = input.ReadFloat();
            break;
          }
          case 45: {
            SunSize = input.ReadFloat();
            break;
          }
          case 53: {
            FogDDensity = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LevelNodeStart : pb::IMessage<LevelNodeStart>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LevelNodeStart> _parser = new pb::MessageParser<LevelNodeStart>(() => new LevelNodeStart());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelNodeStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeStart(LevelNodeStart other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      radius_ = other.radius_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeStart Clone() {
      return new LevelNodeStart(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::COD.Types.Vector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 2;
    private global::COD.Types.Quaternion rotation_;
    /// <summary>
    ///Should always be upright and is meant to be used for the player rotation on spawn
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Quaternion Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 3;
    private float radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelNodeStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelNodeStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Radius, other.Radius)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (Radius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Radius);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rotation);
      }
      if (Radius != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Radius);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rotation);
      }
      if (Radius != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Radius);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (Radius != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelNodeStart other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::COD.Types.Vector();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          Rotation = new global::COD.Types.Quaternion();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.Radius != 0F) {
        Radius = other.Radius;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 18: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 29: {
            Radius = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 18: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 29: {
            Radius = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LevelNodeFinish : pb::IMessage<LevelNodeFinish>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LevelNodeFinish> _parser = new pb::MessageParser<LevelNodeFinish>(() => new LevelNodeFinish());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelNodeFinish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeFinish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeFinish(LevelNodeFinish other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      radius_ = other.radius_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeFinish Clone() {
      return new LevelNodeFinish(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::COD.Types.Vector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 2;
    private float radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelNodeFinish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelNodeFinish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Radius, other.Radius)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (Radius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Radius);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (Radius != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Radius);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (Radius != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Radius);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (Radius != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelNodeFinish other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::COD.Types.Vector();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.Radius != 0F) {
        Radius = other.Radius;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 21: {
            Radius = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 21: {
            Radius = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LevelNodeStatic : pb::IMessage<LevelNodeStatic>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LevelNodeStatic> _parser = new pb::MessageParser<LevelNodeStatic>(() => new LevelNodeStatic());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelNodeStatic> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeStatic() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeStatic(LevelNodeStatic other) : this() {
      shape_ = other.shape_;
      material_ = other.material_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      scale_ = other.scale_ != null ? other.scale_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      color_ = other.color_ != null ? other.color_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeStatic Clone() {
      return new LevelNodeStatic(this);
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 1;
    private global::COD.Types.LevelNodeShape shape_ = global::COD.Types.LevelNodeShape.Start;
    /// <summary>
    ///Must be one of CUBE, SPHERE, CYLINDER, PYRAMID, PRISM
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.LevelNodeShape Shape {
      get { return shape_; }
      set {
        shape_ = value;
      }
    }

    /// <summary>Field number for the "material" field.</summary>
    public const int MaterialFieldNumber = 2;
    private global::COD.Types.LevelNodeMaterial material_ = global::COD.Types.LevelNodeMaterial.Default;
    /// <summary>
    ///Can not be GRABBABLE_CRUMBLING
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.LevelNodeMaterial Material {
      get { return material_; }
      set {
        material_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::COD.Types.Vector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 4;
    private global::COD.Types.Vector scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 5;
    private global::COD.Types.Quaternion rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Quaternion Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 6;
    private global::COD.Types.Color color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelNodeStatic);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelNodeStatic other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Shape != other.Shape) return false;
      if (Material != other.Material) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Scale, other.Scale)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (!object.Equals(Color, other.Color)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Shape != global::COD.Types.LevelNodeShape.Start) hash ^= Shape.GetHashCode();
      if (Material != global::COD.Types.LevelNodeMaterial.Default) hash ^= Material.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (scale_ != null) hash ^= Scale.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (color_ != null) hash ^= Color.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Shape != global::COD.Types.LevelNodeShape.Start) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Shape);
      }
      if (Material != global::COD.Types.LevelNodeMaterial.Default) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Material);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (scale_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Scale);
      }
      if (rotation_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Rotation);
      }
      if (color_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Color);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Shape != global::COD.Types.LevelNodeShape.Start) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Shape);
      }
      if (Material != global::COD.Types.LevelNodeMaterial.Default) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Material);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (scale_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Scale);
      }
      if (rotation_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Rotation);
      }
      if (color_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Color);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Shape != global::COD.Types.LevelNodeShape.Start) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Shape);
      }
      if (Material != global::COD.Types.LevelNodeMaterial.Default) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Material);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (scale_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scale);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelNodeStatic other) {
      if (other == null) {
        return;
      }
      if (other.Shape != global::COD.Types.LevelNodeShape.Start) {
        Shape = other.Shape;
      }
      if (other.Material != global::COD.Types.LevelNodeMaterial.Default) {
        Material = other.Material;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::COD.Types.Vector();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.scale_ != null) {
        if (scale_ == null) {
          Scale = new global::COD.Types.Vector();
        }
        Scale.MergeFrom(other.Scale);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          Rotation = new global::COD.Types.Quaternion();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.color_ != null) {
        if (color_ == null) {
          Color = new global::COD.Types.Color();
        }
        Color.MergeFrom(other.Color);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Shape = (global::COD.Types.LevelNodeShape) input.ReadEnum();
            break;
          }
          case 16: {
            Material = (global::COD.Types.LevelNodeMaterial) input.ReadEnum();
            break;
          }
          case 26: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 34: {
            if (scale_ == null) {
              Scale = new global::COD.Types.Vector();
            }
            input.ReadMessage(Scale);
            break;
          }
          case 42: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 50: {
            if (color_ == null) {
              Color = new global::COD.Types.Color();
            }
            input.ReadMessage(Color);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Shape = (global::COD.Types.LevelNodeShape) input.ReadEnum();
            break;
          }
          case 16: {
            Material = (global::COD.Types.LevelNodeMaterial) input.ReadEnum();
            break;
          }
          case 26: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 34: {
            if (scale_ == null) {
              Scale = new global::COD.Types.Vector();
            }
            input.ReadMessage(Scale);
            break;
          }
          case 42: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 50: {
            if (color_ == null) {
              Color = new global::COD.Types.Color();
            }
            input.ReadMessage(Color);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LevelNodeCrumbling : pb::IMessage<LevelNodeCrumbling>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LevelNodeCrumbling> _parser = new pb::MessageParser<LevelNodeCrumbling>(() => new LevelNodeCrumbling());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelNodeCrumbling> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeCrumbling() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeCrumbling(LevelNodeCrumbling other) : this() {
      shape_ = other.shape_;
      material_ = other.material_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      scale_ = other.scale_ != null ? other.scale_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      stableTime_ = other.stableTime_;
      respawnTime_ = other.respawnTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeCrumbling Clone() {
      return new LevelNodeCrumbling(this);
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 1;
    private global::COD.Types.LevelNodeShape shape_ = global::COD.Types.LevelNodeShape.Start;
    /// <summary>
    ///Must be one of CUBE, SPHERE, CYLINDER, PYRAMID, PRISM
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.LevelNodeShape Shape {
      get { return shape_; }
      set {
        shape_ = value;
      }
    }

    /// <summary>Field number for the "material" field.</summary>
    public const int MaterialFieldNumber = 2;
    private global::COD.Types.LevelNodeMaterial material_ = global::COD.Types.LevelNodeMaterial.Default;
    /// <summary>
    ///Must be GRABBABLE_CRUMBLING
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.LevelNodeMaterial Material {
      get { return material_; }
      set {
        material_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::COD.Types.Vector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 4;
    private global::COD.Types.Vector scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 5;
    private global::COD.Types.Quaternion rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Quaternion Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "stableTime" field.</summary>
    public const int StableTimeFieldNumber = 6;
    private float stableTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StableTime {
      get { return stableTime_; }
      set {
        stableTime_ = value;
      }
    }

    /// <summary>Field number for the "respawnTime" field.</summary>
    public const int RespawnTimeFieldNumber = 7;
    private float respawnTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RespawnTime {
      get { return respawnTime_; }
      set {
        respawnTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelNodeCrumbling);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelNodeCrumbling other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Shape != other.Shape) return false;
      if (Material != other.Material) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Scale, other.Scale)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StableTime, other.StableTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RespawnTime, other.RespawnTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Shape != global::COD.Types.LevelNodeShape.Start) hash ^= Shape.GetHashCode();
      if (Material != global::COD.Types.LevelNodeMaterial.Default) hash ^= Material.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (scale_ != null) hash ^= Scale.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (StableTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StableTime);
      if (RespawnTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RespawnTime);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Shape != global::COD.Types.LevelNodeShape.Start) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Shape);
      }
      if (Material != global::COD.Types.LevelNodeMaterial.Default) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Material);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (scale_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Scale);
      }
      if (rotation_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Rotation);
      }
      if (StableTime != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(StableTime);
      }
      if (RespawnTime != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(RespawnTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Shape != global::COD.Types.LevelNodeShape.Start) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Shape);
      }
      if (Material != global::COD.Types.LevelNodeMaterial.Default) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Material);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (scale_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Scale);
      }
      if (rotation_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Rotation);
      }
      if (StableTime != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(StableTime);
      }
      if (RespawnTime != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(RespawnTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Shape != global::COD.Types.LevelNodeShape.Start) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Shape);
      }
      if (Material != global::COD.Types.LevelNodeMaterial.Default) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Material);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (scale_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scale);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (StableTime != 0F) {
        size += 1 + 4;
      }
      if (RespawnTime != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelNodeCrumbling other) {
      if (other == null) {
        return;
      }
      if (other.Shape != global::COD.Types.LevelNodeShape.Start) {
        Shape = other.Shape;
      }
      if (other.Material != global::COD.Types.LevelNodeMaterial.Default) {
        Material = other.Material;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::COD.Types.Vector();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.scale_ != null) {
        if (scale_ == null) {
          Scale = new global::COD.Types.Vector();
        }
        Scale.MergeFrom(other.Scale);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          Rotation = new global::COD.Types.Quaternion();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.StableTime != 0F) {
        StableTime = other.StableTime;
      }
      if (other.RespawnTime != 0F) {
        RespawnTime = other.RespawnTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Shape = (global::COD.Types.LevelNodeShape) input.ReadEnum();
            break;
          }
          case 16: {
            Material = (global::COD.Types.LevelNodeMaterial) input.ReadEnum();
            break;
          }
          case 26: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 34: {
            if (scale_ == null) {
              Scale = new global::COD.Types.Vector();
            }
            input.ReadMessage(Scale);
            break;
          }
          case 42: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 53: {
            StableTime = input.ReadFloat();
            break;
          }
          case 61: {
            RespawnTime = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Shape = (global::COD.Types.LevelNodeShape) input.ReadEnum();
            break;
          }
          case 16: {
            Material = (global::COD.Types.LevelNodeMaterial) input.ReadEnum();
            break;
          }
          case 26: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 34: {
            if (scale_ == null) {
              Scale = new global::COD.Types.Vector();
            }
            input.ReadMessage(Scale);
            break;
          }
          case 42: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 53: {
            StableTime = input.ReadFloat();
            break;
          }
          case 61: {
            RespawnTime = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LevelNodeSign : pb::IMessage<LevelNodeSign>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LevelNodeSign> _parser = new pb::MessageParser<LevelNodeSign>(() => new LevelNodeSign());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelNodeSign> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeSign() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeSign(LevelNodeSign other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      text_ = other.text_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeSign Clone() {
      return new LevelNodeSign(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::COD.Types.Vector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 2;
    private global::COD.Types.Quaternion rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Quaternion Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 3;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelNodeSign);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelNodeSign other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (Text != other.Text) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rotation);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rotation);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelNodeSign other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::COD.Types.Vector();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          Rotation = new global::COD.Types.Quaternion();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 18: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 26: {
            Text = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 18: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 26: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LevelNode : pb::IMessage<LevelNode>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LevelNode> _parser = new pb::MessageParser<LevelNode>(() => new LevelNode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNode(LevelNode other) : this() {
      switch (other.ContentCase) {
        case ContentOneofCase.LevelNodeStart:
          LevelNodeStart = other.LevelNodeStart.Clone();
          break;
        case ContentOneofCase.LevelNodeFinish:
          LevelNodeFinish = other.LevelNodeFinish.Clone();
          break;
        case ContentOneofCase.LevelNodeStatic:
          LevelNodeStatic = other.LevelNodeStatic.Clone();
          break;
        case ContentOneofCase.LevelNodeSign:
          LevelNodeSign = other.LevelNodeSign.Clone();
          break;
        case ContentOneofCase.LevelNodeCrumbling:
          LevelNodeCrumbling = other.LevelNodeCrumbling.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNode Clone() {
      return new LevelNode(this);
    }

    /// <summary>Field number for the "levelNodeStart" field.</summary>
    public const int LevelNodeStartFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.LevelNodeStart LevelNodeStart {
      get { return contentCase_ == ContentOneofCase.LevelNodeStart ? (global::COD.Types.LevelNodeStart) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.LevelNodeStart;
      }
    }

    /// <summary>Field number for the "levelNodeFinish" field.</summary>
    public const int LevelNodeFinishFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.LevelNodeFinish LevelNodeFinish {
      get { return contentCase_ == ContentOneofCase.LevelNodeFinish ? (global::COD.Types.LevelNodeFinish) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.LevelNodeFinish;
      }
    }

    /// <summary>Field number for the "levelNodeStatic" field.</summary>
    public const int LevelNodeStaticFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.LevelNodeStatic LevelNodeStatic {
      get { return contentCase_ == ContentOneofCase.LevelNodeStatic ? (global::COD.Types.LevelNodeStatic) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.LevelNodeStatic;
      }
    }

    /// <summary>Field number for the "levelNodeSign" field.</summary>
    public const int LevelNodeSignFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.LevelNodeSign LevelNodeSign {
      get { return contentCase_ == ContentOneofCase.LevelNodeSign ? (global::COD.Types.LevelNodeSign) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.LevelNodeSign;
      }
    }

    /// <summary>Field number for the "levelNodeCrumbling" field.</summary>
    public const int LevelNodeCrumblingFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.LevelNodeCrumbling LevelNodeCrumbling {
      get { return contentCase_ == ContentOneofCase.LevelNodeCrumbling ? (global::COD.Types.LevelNodeCrumbling) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.LevelNodeCrumbling;
      }
    }

    private object content_;
    /// <summary>Enum of possible cases for the "content" oneof.</summary>
    public enum ContentOneofCase {
      None = 0,
      LevelNodeStart = 1,
      LevelNodeFinish = 2,
      LevelNodeStatic = 3,
      LevelNodeSign = 4,
      LevelNodeCrumbling = 5,
    }
    private ContentOneofCase contentCase_ = ContentOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentOneofCase ContentCase {
      get { return contentCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContent() {
      contentCase_ = ContentOneofCase.None;
      content_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LevelNodeStart, other.LevelNodeStart)) return false;
      if (!object.Equals(LevelNodeFinish, other.LevelNodeFinish)) return false;
      if (!object.Equals(LevelNodeStatic, other.LevelNodeStatic)) return false;
      if (!object.Equals(LevelNodeSign, other.LevelNodeSign)) return false;
      if (!object.Equals(LevelNodeCrumbling, other.LevelNodeCrumbling)) return false;
      if (ContentCase != other.ContentCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (contentCase_ == ContentOneofCase.LevelNodeStart) hash ^= LevelNodeStart.GetHashCode();
      if (contentCase_ == ContentOneofCase.LevelNodeFinish) hash ^= LevelNodeFinish.GetHashCode();
      if (contentCase_ == ContentOneofCase.LevelNodeStatic) hash ^= LevelNodeStatic.GetHashCode();
      if (contentCase_ == ContentOneofCase.LevelNodeSign) hash ^= LevelNodeSign.GetHashCode();
      if (contentCase_ == ContentOneofCase.LevelNodeCrumbling) hash ^= LevelNodeCrumbling.GetHashCode();
      hash ^= (int) contentCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (contentCase_ == ContentOneofCase.LevelNodeStart) {
        output.WriteRawTag(10);
        output.WriteMessage(LevelNodeStart);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeFinish) {
        output.WriteRawTag(18);
        output.WriteMessage(LevelNodeFinish);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeStatic) {
        output.WriteRawTag(26);
        output.WriteMessage(LevelNodeStatic);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeSign) {
        output.WriteRawTag(34);
        output.WriteMessage(LevelNodeSign);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeCrumbling) {
        output.WriteRawTag(42);
        output.WriteMessage(LevelNodeCrumbling);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (contentCase_ == ContentOneofCase.LevelNodeStart) {
        output.WriteRawTag(10);
        output.WriteMessage(LevelNodeStart);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeFinish) {
        output.WriteRawTag(18);
        output.WriteMessage(LevelNodeFinish);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeStatic) {
        output.WriteRawTag(26);
        output.WriteMessage(LevelNodeStatic);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeSign) {
        output.WriteRawTag(34);
        output.WriteMessage(LevelNodeSign);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeCrumbling) {
        output.WriteRawTag(42);
        output.WriteMessage(LevelNodeCrumbling);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (contentCase_ == ContentOneofCase.LevelNodeStart) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LevelNodeStart);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeFinish) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LevelNodeFinish);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeStatic) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LevelNodeStatic);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeSign) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LevelNodeSign);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeCrumbling) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LevelNodeCrumbling);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelNode other) {
      if (other == null) {
        return;
      }
      switch (other.ContentCase) {
        case ContentOneofCase.LevelNodeStart:
          if (LevelNodeStart == null) {
            LevelNodeStart = new global::COD.Types.LevelNodeStart();
          }
          LevelNodeStart.MergeFrom(other.LevelNodeStart);
          break;
        case ContentOneofCase.LevelNodeFinish:
          if (LevelNodeFinish == null) {
            LevelNodeFinish = new global::COD.Types.LevelNodeFinish();
          }
          LevelNodeFinish.MergeFrom(other.LevelNodeFinish);
          break;
        case ContentOneofCase.LevelNodeStatic:
          if (LevelNodeStatic == null) {
            LevelNodeStatic = new global::COD.Types.LevelNodeStatic();
          }
          LevelNodeStatic.MergeFrom(other.LevelNodeStatic);
          break;
        case ContentOneofCase.LevelNodeSign:
          if (LevelNodeSign == null) {
            LevelNodeSign = new global::COD.Types.LevelNodeSign();
          }
          LevelNodeSign.MergeFrom(other.LevelNodeSign);
          break;
        case ContentOneofCase.LevelNodeCrumbling:
          if (LevelNodeCrumbling == null) {
            LevelNodeCrumbling = new global::COD.Types.LevelNodeCrumbling();
          }
          LevelNodeCrumbling.MergeFrom(other.LevelNodeCrumbling);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::COD.Types.LevelNodeStart subBuilder = new global::COD.Types.LevelNodeStart();
            if (contentCase_ == ContentOneofCase.LevelNodeStart) {
              subBuilder.MergeFrom(LevelNodeStart);
            }
            input.ReadMessage(subBuilder);
            LevelNodeStart = subBuilder;
            break;
          }
          case 18: {
            global::COD.Types.LevelNodeFinish subBuilder = new global::COD.Types.LevelNodeFinish();
            if (contentCase_ == ContentOneofCase.LevelNodeFinish) {
              subBuilder.MergeFrom(LevelNodeFinish);
            }
            input.ReadMessage(subBuilder);
            LevelNodeFinish = subBuilder;
            break;
          }
          case 26: {
            global::COD.Types.LevelNodeStatic subBuilder = new global::COD.Types.LevelNodeStatic();
            if (contentCase_ == ContentOneofCase.LevelNodeStatic) {
              subBuilder.MergeFrom(LevelNodeStatic);
            }
            input.ReadMessage(subBuilder);
            LevelNodeStatic = subBuilder;
            break;
          }
          case 34: {
            global::COD.Types.LevelNodeSign subBuilder = new global::COD.Types.LevelNodeSign();
            if (contentCase_ == ContentOneofCase.LevelNodeSign) {
              subBuilder.MergeFrom(LevelNodeSign);
            }
            input.ReadMessage(subBuilder);
            LevelNodeSign = subBuilder;
            break;
          }
          case 42: {
            global::COD.Types.LevelNodeCrumbling subBuilder = new global::COD.Types.LevelNodeCrumbling();
            if (contentCase_ == ContentOneofCase.LevelNodeCrumbling) {
              subBuilder.MergeFrom(LevelNodeCrumbling);
            }
            input.ReadMessage(subBuilder);
            LevelNodeCrumbling = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::COD.Types.LevelNodeStart subBuilder = new global::COD.Types.LevelNodeStart();
            if (contentCase_ == ContentOneofCase.LevelNodeStart) {
              subBuilder.MergeFrom(LevelNodeStart);
            }
            input.ReadMessage(subBuilder);
            LevelNodeStart = subBuilder;
            break;
          }
          case 18: {
            global::COD.Types.LevelNodeFinish subBuilder = new global::COD.Types.LevelNodeFinish();
            if (contentCase_ == ContentOneofCase.LevelNodeFinish) {
              subBuilder.MergeFrom(LevelNodeFinish);
            }
            input.ReadMessage(subBuilder);
            LevelNodeFinish = subBuilder;
            break;
          }
          case 26: {
            global::COD.Types.LevelNodeStatic subBuilder = new global::COD.Types.LevelNodeStatic();
            if (contentCase_ == ContentOneofCase.LevelNodeStatic) {
              subBuilder.MergeFrom(LevelNodeStatic);
            }
            input.ReadMessage(subBuilder);
            LevelNodeStatic = subBuilder;
            break;
          }
          case 34: {
            global::COD.Types.LevelNodeSign subBuilder = new global::COD.Types.LevelNodeSign();
            if (contentCase_ == ContentOneofCase.LevelNodeSign) {
              subBuilder.MergeFrom(LevelNodeSign);
            }
            input.ReadMessage(subBuilder);
            LevelNodeSign = subBuilder;
            break;
          }
          case 42: {
            global::COD.Types.LevelNodeCrumbling subBuilder = new global::COD.Types.LevelNodeCrumbling();
            if (contentCase_ == ContentOneofCase.LevelNodeCrumbling) {
              subBuilder.MergeFrom(LevelNodeCrumbling);
            }
            input.ReadMessage(subBuilder);
            LevelNodeCrumbling = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
